Project "basic" plugin for XENA

au.gov.naa.digipres.xena.plugin.basic

It gives xena the ability to normalise very basic file types.

Requirements
------------
This plugin requires the Xena project.

This plugin requires the following java archives from the xena project to compile:
javatools.jar - Javatools written by Chris Bitmead
jdom.jar - Java XML package

Content
-------
Folders:
doc - the help documentation for this plugin
etc - configuration files including the manifest file
ext - any external libraries not already used by xena or basic plugin.
images - images used by this plugin
src - source for this plugin

Files:
project_setup.txt - this file
build.xml - the ant build job

External Source:
Tagsoup - Tagsoup is a library used to convert HTML to XHTML, and thus into a form which we can directly insert into our output XML.
		  However there are a few problems in the tagsoup source when used by Xena, which mean that the source code needs to be modified.
		   
		  Firstly tagsoup enforces the HTML specification where certain elements cannot be a child of another certain element 
		  (eg a 'p' element cannot be a child of a 'font' element). This can cause serious problems in the structure of the XHTML output, 
		  as displayed by browsers, and thus the "canContain" method in the Element class has been modified to always return true.
		  
		  Secondly, in certain cases tagsoup will be forced to start an element before immediately closing it. However our XML writer
		  will interpret this as an empty tag (eg <B />. But browers interpret this as just a start tag, and given that there will thus
		  be no matching end tag this element will apply for the rest of the document. To solve this we print an EOL before closing the tag
		  whenever this situation occurs. This is not a perfect solution as some formatting errors occur, but they are minor compared to the
		  formatting errors that occur if this fix is not made. The fix is in the "restart" method of the Parser class.
		  
		  Thirdly, some text files can contain a sequence of characters called the Byte Order Mark which are used to indicate the encoding
		  and/or the endianness of the file. This sequence causes an error when JDOM attempts to parse it. The UTF-16 big endian BOM is handled
		  by tagsoup, however the UTF-16 little endian BOM and the UTF-8 BOM were not handled, and needed to be added. This change was made in 
		  in the scan method of the HTMLScanner class.
		  
		  Fourthly, by default tag soup does not immediately close elements if they are the root element or the child of the root element.
		  Instead it will wait until processing the file has finished and then pop them off the stack. I think this is to fix documents that
		  have erroneously closed the HTML or BODY tags too early. However it has the effect of completely messing up the document if the HTML, HEAD
		  and BODY tags are not present at all. I believe that the latter problem is more likely to occur, so have commented out the lines which
		  cause this behaviour. The fix is in the etag_basic method of the Parser class.
		  